/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OffchainResolverInterface extends utils.Interface {
  functions: {
    "makeSignatureHash(address,uint64,bytes,bytes)": FunctionFragment;
    "resolve(bytes,bytes)": FunctionFragment;
    "resolveWithProof(bytes,bytes)": FunctionFragment;
    "signers(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "url()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "makeSignatureHash"
      | "resolve"
      | "resolveWithProof"
      | "signers"
      | "supportsInterface"
      | "url"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "makeSignatureHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveWithProof",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "url", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "makeSignatureHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "url", data: BytesLike): Result;

  events: {
    "NewSigners(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSigners"): EventFragment;
}

export interface NewSignersEventObject {
  signers: string[];
}
export type NewSignersEvent = TypedEvent<[string[]], NewSignersEventObject>;

export type NewSignersEventFilter = TypedEventFilter<NewSignersEvent>;

export interface OffchainResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OffchainResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    makeSignatureHash(
      target: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      request: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    resolve(
      name: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    resolveWithProof(
      response: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    url(overrides?: CallOverrides): Promise<[string]>;
  };

  makeSignatureHash(
    target: PromiseOrValue<string>,
    expires: PromiseOrValue<BigNumberish>,
    request: PromiseOrValue<BytesLike>,
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  resolve(
    name: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveWithProof(
    response: PromiseOrValue<BytesLike>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  signers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  url(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    makeSignatureHash(
      target: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      request: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    resolve(
      name: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveWithProof(
      response: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    url(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewSigners(address[])"(signers?: null): NewSignersEventFilter;
    NewSigners(signers?: null): NewSignersEventFilter;
  };

  estimateGas: {
    makeSignatureHash(
      target: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      request: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolve(
      name: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveWithProof(
      response: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    url(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    makeSignatureHash(
      target: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      request: PromiseOrValue<BytesLike>,
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      name: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveWithProof(
      response: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    url(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
