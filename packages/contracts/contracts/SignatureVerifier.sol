// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "./IVerifier.sol";

/**
 * @dev A signature verifier for CCIP-read.
 * 
 * The signature format used must be identical between verifier and gateway contract. This contract
 * implements the following convention:
 *  - `request` is opaque to the verifier and can contain any value that the gateway understands.
 *  - `response` is an ABI-encoded tuple of `(bytes result, uint64 expires, bytes signature)`.
 *  - `result` is opaque to the verifier and can contain any value that the calling contract understands.
 *  - `signature` is generated by concatenating the following arguments and signing the keccak256 of the resulting string:
      - hex"1900"
      - The 20 byte address that the signature is for
      - The 64-bit (8 byte) expiration timestamp of the signature
      - `keccak256(request)`
      - `keccack256(result)`
 */
contract SignatureVerifier is IVerifier {
    mapping(address=>bool) public signers;

    event NewSigners(address[] signers);

    constructor(address[] memory _signers) {
        emit NewSigners(_signers);
        for(uint i = 0; i < _signers.length; i++) {
            signers[_signers[i]] = true;
        }
    }

    /**
     * @dev Generates a hash for signing/verifying.
     * @param target: The address the signature is for.
     * @param request: The original request that was sent.
     * @param result: The `result` field of the response (not including the signature part).
     */
    function makeSignatureHash(address target, uint64 expires, bytes memory request, bytes memory result) public pure returns(bytes32) {
        return keccak256(abi.encodePacked(hex"1900", target, expires, keccak256(request), keccak256(result)));
    }

    /**
     * @dev Verifies a signed message returned from a callback.
     * @param request: The original request that was sent.
     * @param response: An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return
     *        to the caller, and `sig` is the (r,s,v) encoded message signature.
     * @return The `result` decoded from `response`, or a revert if the signature does not verify correctly.
     */
    function verify(bytes calldata request, bytes calldata response) external override view returns(bytes memory) {
        (bytes memory responseData) = abi.decode(response, (bytes));
        (bytes memory result, uint64 expires, bytes memory sig) = abi.decode(responseData, (bytes, uint64, bytes));
        require(
            signers[ECDSA.recover(makeSignatureHash(msg.sender, expires, request, result), sig)], 
            "SignatureVerifier: Invalid sigature");
        require(
            expires >= block.timestamp,
            "SignatureVerifier: Signature expired");
        return result;
    }
}
