{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        }
      ],
      "name": "NewSigners",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "request",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "makeSignatureHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveWithProof",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "url",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "request",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb3142c2c4d214b58378a5261859a7f104908a38b4b9911bb75f8f21aa28e896",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1533637",
    "logsBloom": "0x
    "blockHash": "0x1c3ddb73fe3e14744c3886da8c613476caceb0ebce1fd759dc687b14bab36f53",
    "transactionHash": "0xdb3142c2c4d214b58378a5261859a7f104908a38b4b9911bb75f8f21aa28e896",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xdb3142c2c4d214b58378a5261859a7f104908a38b4b9911bb75f8f21aa28e896",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0xab0b9cc3a46b568cb08d985497cde8ab7e18892d01f58db7dc7f0d2af859b2d7"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 0,
        "blockHash": "0x1c3ddb73fe3e14744c3886da8c613476caceb0ebce1fd759dc687b14bab36f53"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1533637",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "http://localhost:8000/{sender}/{callData}.json",
    [
      "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "9b9da2080330d544f3c8b388c25cf084",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"NewSigners\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"makeSignatureHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveWithProof\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"makeSignatureHash(address,uint64,bytes,bytes)\":{\"details\":\"Generates a hash for signing/verifying.\",\"params\":{\"request\":\": The original request that was sent.\",\"result\":\": The `result` field of the response (not including the signature part).\",\"target\":\": The address the signature is for.\"}},\"resolve(bytes,bytes)\":{\"params\":{\"data\":\"The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).\",\"name\":\"The DNS-encoded name to resolve.\"},\"returns\":{\"_0\":\"The return data, ABI encoded identically to the underlying function.\"}},\"verify(bytes,bytes)\":{\"details\":\"Verifies a signed message returned from a callback.\",\"params\":{\"request\":\": The original request that was sent.\",\"response\":\": An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return        to the caller, and `sig` is the (r,s,v) encoded message signature.\"},\"returns\":{\"_0\":\"The `result` decoded from `response`, or a revert if the signature does not verify correctly.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolve(bytes,bytes)\":{\"notice\":\"Resolves a name, as specified by ENSIP 10.\"},\"resolveWithProof(bytes,bytes)\":{\"notice\":\"Callback used by CCIP read compatible clients to verify and parse the response.\"}},\"notice\":\"Implements an ENS resolver that directs all queries to a CCIP read gateway. Callers must implement EIP 3668 and ENSIP 10.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OffchainResolver.sol\":\"OffchainResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/ISupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\\n}\",\"keccak256\":\"0x4960422af4a3d38a2c440c656104465cba7dea0231cb7ae4a489a85dd65f645f\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ISupportsInterface.sol\\\";\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xcd27206ee8f8bd520d5441294f6438dde98f6933eb8801ee59a0155b8a8cde1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x9d484d07c45702fd30d65d106e1fd00c68a9073730abfdf903eeb21af9c1b49b\",\"license\":\"MIT\"},\"contracts/OffchainResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/SupportsInterface.sol\\\";\\nimport \\\"./IExtendedResolver.sol\\\";\\n\\ninterface IResolverService {\\n    function resolve(bytes calldata name, bytes calldata data) external view returns(bytes memory result, uint64 expires, bytes memory sig);\\n}\\n\\n/**\\n * Implements an ENS resolver that directs all queries to a CCIP read gateway.\\n * Callers must implement EIP 3668 and ENSIP 10.\\n */\\ncontract OffchainResolver is IExtendedResolver, SupportsInterface {\\n    string public url;\\n    mapping(address=>bool) public signers;\\n\\n    event NewSigners(address[] signers);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    constructor(string memory _url, address[] memory _signers) {\\n        url = _url;\\n        for(uint i = 0; i < _signers.length; i++) {\\n            signers[_signers[i]] = true;\\n        }\\n        emit NewSigners(_signers);\\n    }\\n\\n    /**\\n     * @dev Generates a hash for signing/verifying.\\n     * @param target: The address the signature is for.\\n     * @param request: The original request that was sent.\\n     * @param result: The `result` field of the response (not including the signature part).\\n     */\\n    function makeSignatureHash(address target, uint64 expires, bytes memory request, bytes memory result) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"1900\\\", target, expires, keccak256(request), keccak256(result)));\\n    }\\n\\n    /**\\n     * @dev Verifies a signed message returned from a callback.\\n     * @param request: The original request that was sent.\\n     * @param response: An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return\\n     *        to the caller, and `sig` is the (r,s,v) encoded message signature.\\n     * @return The `result` decoded from `response`, or a revert if the signature does not verify correctly.\\n     */\\n    function verify(bytes calldata request, bytes calldata response) public view returns(bytes memory) {\\n        (bytes memory result, uint64 expires, bytes memory sig) = abi.decode(response, (bytes, uint64, bytes));\\n        require(\\n            signers[ECDSA.recover(makeSignatureHash(address(this), expires, request, result), sig)], \\n            \\\"SignatureVerifier: Invalid sigature\\\");\\n        require(\\n            expires >= block.timestamp,\\n            \\\"SignatureVerifier: Signature expired\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * Resolves a name, as specified by ENSIP 10.\\n     * @param name The DNS-encoded name to resolve.\\n     * @param data The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).\\n     * @return The return data, ABI encoded identically to the underlying function.\\n     */\\n    function resolve(bytes calldata name, bytes calldata data) external override view returns(bytes memory) {\\n        bytes memory callData = abi.encodeWithSelector(IResolverService.resolve.selector, name, data);\\n        string[] memory urls = new string[](1);\\n        urls[0] = url;\\n        revert OffchainLookup(\\n            address(this),\\n            urls,\\n            callData,\\n            OffchainResolver.resolveWithProof.selector,\\n            callData\\n        );\\n    }\\n\\n    /**\\n     * Callback used by CCIP read compatible clients to verify and parse the response.\\n     */\\n    function resolveWithProof(bytes calldata response, bytes calldata extraData) external view returns(bytes memory) {\\n        bytes memory result = verify(extraData, response);\\n        return result;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns(bool) {\\n        return interfaceID == type(IExtendedResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x7a0a734326fa8f50fd1b588b220f9015f5a6d8504f2033a5b157a95d485c362e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200200e3803806200200e8339818101604052810190620000379190620004b6565b81600090805190602001906200004f92919062000129565b5060005b8151811015620000e75760018060008484815181106200007857620000776200053b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620000de90620005a3565b91505062000053565b507fab0b9cc3a46b568cb08d985497cde8ab7e18892d01f58db7dc7f0d2af859b2d781604051620001199190620006bf565b60405180910390a1505062000748565b828054620001379062000712565b90600052602060002090601f0160209004810192826200015b5760008555620001a7565b82601f106200017657805160ff1916838001178555620001a7565b82800160010185558215620001a7579182015b82811115620001a657825182559160200191906001019062000189565b5b509050620001b69190620001ba565b5090565b5b80821115620001d5576000816000905550600101620001bb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024282620001f7565b810181811067ffffffffffffffff8211171562000264576200026362000208565b5b80604052505050565b600062000279620001d9565b905062000287828262000237565b919050565b600067ffffffffffffffff821115620002aa57620002a962000208565b5b620002b582620001f7565b9050602081019050919050565b60005b83811015620002e2578082015181840152602081019050620002c5565b83811115620002f2576000848401525b50505050565b60006200030f62000309846200028c565b6200026d565b9050828152602081018484840111156200032e576200032d620001f2565b5b6200033b848285620002c2565b509392505050565b600082601f8301126200035b576200035a620001ed565b5b81516200036d848260208601620002f8565b91505092915050565b600067ffffffffffffffff82111562000394576200039362000208565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003d782620003aa565b9050919050565b620003e981620003ca565b8114620003f557600080fd5b50565b6000815190506200040981620003de565b92915050565b600062000426620004208462000376565b6200026d565b905080838252602082019050602084028301858111156200044c576200044b620003a5565b5b835b81811015620004795780620004648882620003f8565b8452602084019350506020810190506200044e565b5050509392505050565b600082601f8301126200049b576200049a620001ed565b5b8151620004ad8482602086016200040f565b91505092915050565b60008060408385031215620004d057620004cf620001e3565b5b600083015167ffffffffffffffff811115620004f157620004f0620001e8565b5b620004ff8582860162000343565b925050602083015167ffffffffffffffff811115620005235762000522620001e8565b5b620005318582860162000483565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620005b08262000599565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620005e657620005e56200056a565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200062881620003ca565b82525050565b60006200063c83836200061d565b60208301905092915050565b6000602082019050919050565b60006200066282620005f1565b6200066e8185620005fc565b93506200067b836200060d565b8060005b83811015620006b25781516200069688826200062e565b9750620006a38362000648565b9250506001810190506200067f565b5085935050505092915050565b60006020820190508181036000830152620006db818462000655565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200072b57607f821691505b60208210811415620007425762000741620006e3565b5b50919050565b6118b680620007586000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063736c0d5b1161005b578063736c0d5b146101005780639061b92314610130578063f4d4d2f814610160578063f7e83aee146101905761007d565b806301ffc9a7146100825780631dcfea09146100b25780635600f04f146100e2575b600080fd5b61009c60048036038101906100979190610b23565b6101c0565b6040516100a99190610b6b565b60405180910390f35b6100cc60048036038101906100c79190610d6a565b61023a565b6040516100d99190610e22565b60405180910390f35b6100ea610281565b6040516100f79190610ec5565b60405180910390f35b61011a60048036038101906101159190610ee7565b61030f565b6040516101279190610b6b565b60405180910390f35b61014a60048036038101906101459190610f74565b61032f565b604051610157919061104a565b60405180910390f35b61017a60048036038101906101759190610f74565b6104fa565b604051610187919061104a565b60405180910390f35b6101aa60048036038101906101a59190610f74565b610518565b6040516101b7919061104a565b60405180910390f35b60007f9061b923000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610233575061023282610673565b5b9050919050565b60008484848051906020012084805190602001206040516020016102619493929190611162565b604051602081830303815290604052805190602001209050949350505050565b6000805461028e906111ea565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba906111ea565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b505050505081565b60016020528060005260406000206000915054906101000a900460ff1681565b60606000639061b92360e01b868686866040516024016103529493929190611249565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600167ffffffffffffffff8111156103ce576103cd610c3f565b5b60405190808252806020026020018201604052801561040157816020015b60608152602001906001900390816103ec5790505b50905060008054610411906111ea565b80601f016020809104026020016040519081016040528092919081815260200182805461043d906111ea565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050816000815181106104a3576104a2611284565b5b602002602001018190525030818363f4d4d2f860e01b856040517f556f18300000000000000000000000000000000000000000000000000000000081526004016104f19594939291906113dd565b60405180910390fd5b6060600061050a84848888610518565b905080915050949350505050565b60606000806000858581019061052e9190611445565b9250925092506001600061059161058b30868d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508961023a565b846106dd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90611542565b60405180910390fd5b428267ffffffffffffffff161015610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c906115d4565b60405180910390fd5b829350505050949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008060006106ec8585610704565b915091506106f981610787565b819250505092915050565b6000806041835114156107465760008060006020860151925060408601519150606086015160001a905061073a8782858561095c565b94509450505050610780565b60408351141561077757600080602085015191506040850151905061076c868383610a69565b935093505050610780565b60006002915091505b9250929050565b6000600481111561079b5761079a6115f4565b5b8160048111156107ae576107ad6115f4565b5b14156107b957610959565b600160048111156107cd576107cc6115f4565b5b8160048111156107e0576107df6115f4565b5b1415610821576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108189061166f565b60405180910390fd5b60026004811115610835576108346115f4565b5b816004811115610848576108476115f4565b5b1415610889576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610880906116db565b60405180910390fd5b6003600481111561089d5761089c6115f4565b5b8160048111156108b0576108af6115f4565b5b14156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e89061176d565b60405180910390fd5b600480811115610904576109036115f4565b5b816004811115610917576109166115f4565b5b1415610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f906117ff565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610997576000600391509150610a60565b601b8560ff16141580156109af5750601c8560ff1614155b156109c1576000600491509150610a60565b6000600187878787604051600081526020016040526040516109e6949392919061183b565b6020604051602081039080840390855afa158015610a08573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5757600060019250925050610a60565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610aa98782888561095c565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b0081610acb565b8114610b0b57600080fd5b50565b600081359050610b1d81610af7565b92915050565b600060208284031215610b3957610b38610ac1565b5b6000610b4784828501610b0e565b91505092915050565b60008115159050919050565b610b6581610b50565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb182610b86565b9050919050565b610bc181610ba6565b8114610bcc57600080fd5b50565b600081359050610bde81610bb8565b92915050565b600067ffffffffffffffff82169050919050565b610c0181610be4565b8114610c0c57600080fd5b50565b600081359050610c1e81610bf8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7782610c2e565b810181811067ffffffffffffffff82111715610c9657610c95610c3f565b5b80604052505050565b6000610ca9610ab7565b9050610cb58282610c6e565b919050565b600067ffffffffffffffff821115610cd557610cd4610c3f565b5b610cde82610c2e565b9050602081019050919050565b82818337600083830152505050565b6000610d0d610d0884610cba565b610c9f565b905082815260208101848484011115610d2957610d28610c29565b5b610d34848285610ceb565b509392505050565b600082601f830112610d5157610d50610c24565b5b8135610d61848260208601610cfa565b91505092915050565b60008060008060808587031215610d8457610d83610ac1565b5b6000610d9287828801610bcf565b9450506020610da387828801610c0f565b935050604085013567ffffffffffffffff811115610dc457610dc3610ac6565b5b610dd087828801610d3c565b925050606085013567ffffffffffffffff811115610df157610df0610ac6565b5b610dfd87828801610d3c565b91505092959194509250565b6000819050919050565b610e1c81610e09565b82525050565b6000602082019050610e376000830184610e13565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e77578082015181840152602081019050610e5c565b83811115610e86576000848401525b50505050565b6000610e9782610e3d565b610ea18185610e48565b9350610eb1818560208601610e59565b610eba81610c2e565b840191505092915050565b60006020820190508181036000830152610edf8184610e8c565b905092915050565b600060208284031215610efd57610efc610ac1565b5b6000610f0b84828501610bcf565b91505092915050565b600080fd5b600080fd5b60008083601f840112610f3457610f33610c24565b5b8235905067ffffffffffffffff811115610f5157610f50610f14565b5b602083019150836001820283011115610f6d57610f6c610f19565b5b9250929050565b60008060008060408587031215610f8e57610f8d610ac1565b5b600085013567ffffffffffffffff811115610fac57610fab610ac6565b5b610fb887828801610f1e565b9450945050602085013567ffffffffffffffff811115610fdb57610fda610ac6565b5b610fe787828801610f1e565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b600061101c82610ff5565b6110268185611000565b9350611036818560208601610e59565b61103f81610c2e565b840191505092915050565b600060208201905081810360008301526110648184611011565b905092915050565b600081905092915050565b7f1900000000000000000000000000000000000000000000000000000000000000600082015250565b60006110ad60028361106c565b91506110b882611077565b600282019050919050565b60008160601b9050919050565b60006110db826110c3565b9050919050565b60006110ed826110d0565b9050919050565b61110561110082610ba6565b6110e2565b82525050565b60008160c01b9050919050565b60006111238261110b565b9050919050565b61113b61113682610be4565b611118565b82525050565b6000819050919050565b61115c61115782610e09565b611141565b82525050565b600061116d826110a0565b915061117982876110f4565b601482019150611189828661112a565b600882019150611199828561114b565b6020820191506111a9828461114b565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061120257607f821691505b60208210811415611216576112156111bb565b5b50919050565b60006112288385611000565b9350611235838584610ceb565b61123e83610c2e565b840190509392505050565b6000604082019050818103600083015261126481868861121c565b9050818103602083015261127981848661121c565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6112bc81610ba6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061130a82610e3d565b61131481856112ee565b9350611324818560208601610e59565b61132d81610c2e565b840191505092915050565b600061134483836112ff565b905092915050565b6000602082019050919050565b6000611364826112c2565b61136e81856112cd565b935083602082028501611380856112de565b8060005b858110156113bc578484038952815161139d8582611338565b94506113a88361134c565b925060208a01995050600181019050611384565b50829750879550505050505092915050565b6113d781610acb565b82525050565b600060a0820190506113f260008301886112b3565b81810360208301526114048187611359565b905081810360408301526114188186611011565b905061142760608301856113ce565b81810360808301526114398184611011565b90509695505050505050565b60008060006060848603121561145e5761145d610ac1565b5b600084013567ffffffffffffffff81111561147c5761147b610ac6565b5b61148886828701610d3c565b935050602061149986828701610c0f565b925050604084013567ffffffffffffffff8111156114ba576114b9610ac6565b5b6114c686828701610d3c565b9150509250925092565b7f5369676e617475726556657269666965723a20496e76616c696420736967617460008201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b600061152c602383610e48565b9150611537826114d0565b604082019050919050565b6000602082019050818103600083015261155b8161151f565b9050919050565b7f5369676e617475726556657269666965723a205369676e61747572652065787060008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b60006115be602483610e48565b91506115c982611562565b604082019050919050565b600060208201905081810360008301526115ed816115b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611659601883610e48565b915061166482611623565b602082019050919050565b600060208201905081810360008301526116888161164c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006116c5601f83610e48565b91506116d08261168f565b602082019050919050565b600060208201905081810360008301526116f4816116b8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611757602283610e48565b9150611762826116fb565b604082019050919050565b600060208201905081810360008301526117868161174a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006117e9602283610e48565b91506117f48261178d565b604082019050919050565b60006020820190508181036000830152611818816117dc565b9050919050565b600060ff82169050919050565b6118358161181f565b82525050565b60006080820190506118506000830187610e13565b61185d602083018661182c565b61186a6040830185610e13565b6118776060830184610e13565b9594505050505056fea2646970667358221220688141a7088e5353f7494ed9cb55b920506e793ee44c8c3da7777e73a483971c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063736c0d5b1161005b578063736c0d5b146101005780639061b92314610130578063f4d4d2f814610160578063f7e83aee146101905761007d565b806301ffc9a7146100825780631dcfea09146100b25780635600f04f146100e2575b600080fd5b61009c60048036038101906100979190610b23565b6101c0565b6040516100a99190610b6b565b60405180910390f35b6100cc60048036038101906100c79190610d6a565b61023a565b6040516100d99190610e22565b60405180910390f35b6100ea610281565b6040516100f79190610ec5565b60405180910390f35b61011a60048036038101906101159190610ee7565b61030f565b6040516101279190610b6b565b60405180910390f35b61014a60048036038101906101459190610f74565b61032f565b604051610157919061104a565b60405180910390f35b61017a60048036038101906101759190610f74565b6104fa565b604051610187919061104a565b60405180910390f35b6101aa60048036038101906101a59190610f74565b610518565b6040516101b7919061104a565b60405180910390f35b60007f9061b923000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610233575061023282610673565b5b9050919050565b60008484848051906020012084805190602001206040516020016102619493929190611162565b604051602081830303815290604052805190602001209050949350505050565b6000805461028e906111ea565b80601f01602080910402602001604051908101604052809291908181526020018280546102ba906111ea565b80156103075780601f106102dc57610100808354040283529160200191610307565b820191906000526020600020905b8154815290600101906020018083116102ea57829003601f168201915b505050505081565b60016020528060005260406000206000915054906101000a900460ff1681565b60606000639061b92360e01b868686866040516024016103529493929190611249565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600167ffffffffffffffff8111156103ce576103cd610c3f565b5b60405190808252806020026020018201604052801561040157816020015b60608152602001906001900390816103ec5790505b50905060008054610411906111ea565b80601f016020809104026020016040519081016040528092919081815260200182805461043d906111ea565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050816000815181106104a3576104a2611284565b5b602002602001018190525030818363f4d4d2f860e01b856040517f556f18300000000000000000000000000000000000000000000000000000000081526004016104f19594939291906113dd565b60405180910390fd5b6060600061050a84848888610518565b905080915050949350505050565b60606000806000858581019061052e9190611445565b9250925092506001600061059161058b30868d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508961023a565b846106dd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90611542565b60405180910390fd5b428267ffffffffffffffff161015610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c906115d4565b60405180910390fd5b829350505050949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008060006106ec8585610704565b915091506106f981610787565b819250505092915050565b6000806041835114156107465760008060006020860151925060408601519150606086015160001a905061073a8782858561095c565b94509450505050610780565b60408351141561077757600080602085015191506040850151905061076c868383610a69565b935093505050610780565b60006002915091505b9250929050565b6000600481111561079b5761079a6115f4565b5b8160048111156107ae576107ad6115f4565b5b14156107b957610959565b600160048111156107cd576107cc6115f4565b5b8160048111156107e0576107df6115f4565b5b1415610821576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108189061166f565b60405180910390fd5b60026004811115610835576108346115f4565b5b816004811115610848576108476115f4565b5b1415610889576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610880906116db565b60405180910390fd5b6003600481111561089d5761089c6115f4565b5b8160048111156108b0576108af6115f4565b5b14156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e89061176d565b60405180910390fd5b600480811115610904576109036115f4565b5b816004811115610917576109166115f4565b5b1415610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f906117ff565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610997576000600391509150610a60565b601b8560ff16141580156109af5750601c8560ff1614155b156109c1576000600491509150610a60565b6000600187878787604051600081526020016040526040516109e6949392919061183b565b6020604051602081039080840390855afa158015610a08573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5757600060019250925050610a60565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610aa98782888561095c565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b0081610acb565b8114610b0b57600080fd5b50565b600081359050610b1d81610af7565b92915050565b600060208284031215610b3957610b38610ac1565b5b6000610b4784828501610b0e565b91505092915050565b60008115159050919050565b610b6581610b50565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb182610b86565b9050919050565b610bc181610ba6565b8114610bcc57600080fd5b50565b600081359050610bde81610bb8565b92915050565b600067ffffffffffffffff82169050919050565b610c0181610be4565b8114610c0c57600080fd5b50565b600081359050610c1e81610bf8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7782610c2e565b810181811067ffffffffffffffff82111715610c9657610c95610c3f565b5b80604052505050565b6000610ca9610ab7565b9050610cb58282610c6e565b919050565b600067ffffffffffffffff821115610cd557610cd4610c3f565b5b610cde82610c2e565b9050602081019050919050565b82818337600083830152505050565b6000610d0d610d0884610cba565b610c9f565b905082815260208101848484011115610d2957610d28610c29565b5b610d34848285610ceb565b509392505050565b600082601f830112610d5157610d50610c24565b5b8135610d61848260208601610cfa565b91505092915050565b60008060008060808587031215610d8457610d83610ac1565b5b6000610d9287828801610bcf565b9450506020610da387828801610c0f565b935050604085013567ffffffffffffffff811115610dc457610dc3610ac6565b5b610dd087828801610d3c565b925050606085013567ffffffffffffffff811115610df157610df0610ac6565b5b610dfd87828801610d3c565b91505092959194509250565b6000819050919050565b610e1c81610e09565b82525050565b6000602082019050610e376000830184610e13565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e77578082015181840152602081019050610e5c565b83811115610e86576000848401525b50505050565b6000610e9782610e3d565b610ea18185610e48565b9350610eb1818560208601610e59565b610eba81610c2e565b840191505092915050565b60006020820190508181036000830152610edf8184610e8c565b905092915050565b600060208284031215610efd57610efc610ac1565b5b6000610f0b84828501610bcf565b91505092915050565b600080fd5b600080fd5b60008083601f840112610f3457610f33610c24565b5b8235905067ffffffffffffffff811115610f5157610f50610f14565b5b602083019150836001820283011115610f6d57610f6c610f19565b5b9250929050565b60008060008060408587031215610f8e57610f8d610ac1565b5b600085013567ffffffffffffffff811115610fac57610fab610ac6565b5b610fb887828801610f1e565b9450945050602085013567ffffffffffffffff811115610fdb57610fda610ac6565b5b610fe787828801610f1e565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b600061101c82610ff5565b6110268185611000565b9350611036818560208601610e59565b61103f81610c2e565b840191505092915050565b600060208201905081810360008301526110648184611011565b905092915050565b600081905092915050565b7f1900000000000000000000000000000000000000000000000000000000000000600082015250565b60006110ad60028361106c565b91506110b882611077565b600282019050919050565b60008160601b9050919050565b60006110db826110c3565b9050919050565b60006110ed826110d0565b9050919050565b61110561110082610ba6565b6110e2565b82525050565b60008160c01b9050919050565b60006111238261110b565b9050919050565b61113b61113682610be4565b611118565b82525050565b6000819050919050565b61115c61115782610e09565b611141565b82525050565b600061116d826110a0565b915061117982876110f4565b601482019150611189828661112a565b600882019150611199828561114b565b6020820191506111a9828461114b565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061120257607f821691505b60208210811415611216576112156111bb565b5b50919050565b60006112288385611000565b9350611235838584610ceb565b61123e83610c2e565b840190509392505050565b6000604082019050818103600083015261126481868861121c565b9050818103602083015261127981848661121c565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6112bc81610ba6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061130a82610e3d565b61131481856112ee565b9350611324818560208601610e59565b61132d81610c2e565b840191505092915050565b600061134483836112ff565b905092915050565b6000602082019050919050565b6000611364826112c2565b61136e81856112cd565b935083602082028501611380856112de565b8060005b858110156113bc578484038952815161139d8582611338565b94506113a88361134c565b925060208a01995050600181019050611384565b50829750879550505050505092915050565b6113d781610acb565b82525050565b600060a0820190506113f260008301886112b3565b81810360208301526114048187611359565b905081810360408301526114188186611011565b905061142760608301856113ce565b81810360808301526114398184611011565b90509695505050505050565b60008060006060848603121561145e5761145d610ac1565b5b600084013567ffffffffffffffff81111561147c5761147b610ac6565b5b61148886828701610d3c565b935050602061149986828701610c0f565b925050604084013567ffffffffffffffff8111156114ba576114b9610ac6565b5b6114c686828701610d3c565b9150509250925092565b7f5369676e617475726556657269666965723a20496e76616c696420736967617460008201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b600061152c602383610e48565b9150611537826114d0565b604082019050919050565b6000602082019050818103600083015261155b8161151f565b9050919050565b7f5369676e617475726556657269666965723a205369676e61747572652065787060008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b60006115be602483610e48565b91506115c982611562565b604082019050919050565b600060208201905081810360008301526115ed816115b1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611659601883610e48565b915061166482611623565b602082019050919050565b600060208201905081810360008301526116888161164c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006116c5601f83610e48565b91506116d08261168f565b602082019050919050565b600060208201905081810360008301526116f4816116b8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611757602283610e48565b9150611762826116fb565b604082019050919050565b600060208201905081810360008301526117868161174a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006117e9602283610e48565b91506117f48261178d565b604082019050919050565b60006020820190508181036000830152611818816117dc565b9050919050565b600060ff82169050919050565b6118358161181f565b82525050565b60006080820190506118506000830187610e13565b61185d602083018661182c565b61186a6040830185610e13565b6118776060830184610e13565b9594505050505056fea2646970667358221220688141a7088e5353f7494ed9cb55b920506e793ee44c8c3da7777e73a483971c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "makeSignatureHash(address,uint64,bytes,bytes)": {
        "details": "Generates a hash for signing/verifying.",
        "params": {
          "request": ": The original request that was sent.",
          "result": ": The `result` field of the response (not including the signature part).",
          "target": ": The address the signature is for."
        }
      },
      "resolve(bytes,bytes)": {
        "params": {
          "data": "The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).",
          "name": "The DNS-encoded name to resolve."
        },
        "returns": {
          "_0": "The return data, ABI encoded identically to the underlying function."
        }
      },
      "verify(bytes,bytes)": {
        "details": "Verifies a signed message returned from a callback.",
        "params": {
          "request": ": The original request that was sent.",
          "response": ": An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return        to the caller, and `sig` is the (r,s,v) encoded message signature."
        },
        "returns": {
          "_0": "The `result` decoded from `response`, or a revert if the signature does not verify correctly."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolve(bytes,bytes)": {
        "notice": "Resolves a name, as specified by ENSIP 10."
      },
      "resolveWithProof(bytes,bytes)": {
        "notice": "Callback used by CCIP read compatible clients to verify and parse the response."
      }
    },
    "notice": "Implements an ENS resolver that directs all queries to a CCIP read gateway. Callers must implement EIP 3668 and ENSIP 10.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 662,
        "contract": "contracts/OffchainResolver.sol:OffchainResolver",
        "label": "url",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/OffchainResolver.sol:OffchainResolver",
        "label": "signers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}